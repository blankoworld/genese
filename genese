#!/usr/bin/env bash
#
# genese: Tool to generate instances from one to several projects via
#   Docker Compose using configs to know which services to use.
#

PROGRAM=`basename $0 .sh`
BASE_DIR=$(cd `dirname $0` && pwd)

#####
## VARIABLES
###

# Original repository to download
SOURCE="https://github.com/blankoworld/genese.git"

# Program usage message
read -d '' USAGE << EOF
Usage: ${PROGRAM} [options]

OPTIONS
  -h, --help                  Display this context help
  -i, --instance              List installed instances
  -l, --list                  List available configs
  -n <name>, --name <name>    Name of instance to create (use it with -c)
  -c <name>, --config <name>  Use given config
  -d <name>, --delete <name>  Delete given instance

EXAMPLES

    # Display help
    ${PROGRAM} -h

    # Create instance using 'default' config.
    ${PROGRAM} -c default

    # Create a 'super_instance' instance using 'default' config.
    ${PROGRAM} -c default -n super_instance

    # List instances
    ${PROGRAM} -i

    # Delete instance called 'super_instance'
    ${PROGRAM} -d super_instance

EOF

#####
## FUNCTIONS
###

# Display context help
help() {
 echo -e "${USAGE}" 1>&2
}

# Browse options from command line. But only if arguments in command line.
analyze_options() {
  while [[ "$#" -gt 0 ]]
  do
    case "$1" in
      -h | --help)
        help
        ;;
      -i | --instance)
        instances_list
        ;;
      -l | --list)
        list_configs
        ;;
      -n | --name)
        parameter_error="No instance name given for the '--name' parameter."
        if [[ -n "${2}" ]]; then
          # Check if arg start with a dash ("-")
          if [[ "${2}" == -* ]]; then
            err_msg_and_exit "${parameter_error}"
          fi
          # Instance name initialization (choosen by user)
          CHOOSEN_INSTANCE_NAME="${2}"
        else
          err_msg_and_exit "${parameter_error}"
        fi
        ;;
      -c | --config)
        if [[ -n "${2}" ]]; then
          CONFIG="${2}"
        fi
        # Marker to know man want to start an instance
        INSTANCE_CREATION=true
        ;;
      -d | --delete)
        if [[ -n "${2}" ]]; then
          # Instance name to delete
          INSTANCE_NAME="${2}"
        else
          err_msg_and_exit "No instance given as parameter!"
        fi
        delete_instance "${INSTANCE_NAME}"
        ;;
    esac
    # Shit option to browse next
    shift
  done
}

# Load user configuration data
configure() {
  # User configuration? If yes, load it!
  if [[ -f "${BASE_DIR}/.env" ]]; then
    # Load user custom environment variables
    source "${BASE_DIR}/.env"
  fi
}

# Display final message after instance creation
# - needs 'docker' lib
# 1: Instance name
post_instance_creation_msg() {
  # Containers list from choosen instance
  # INSTALL_DIR was create in create_instance()
  list_containers "${INSTALL_DIR}"

  # For each service, execute a final hook, if exists.
  run_services_script "${FINAL_INSTALLATION_HOOK_NAME}"

  # Display Portainer info
  info_msg "Access to all 'stacks' installed with Docker (bookmark it!): ${BOLD}${RED_COLOR}http://localhost:${PORTAINER_PORT}/${DEFAULT_COLOR}"

  success_msg "(instance) '${1}': Installation completed."
}

# Try loading remaining file from this script using SOURCE repo content
self_loading() {
  # Either GIT repo exists, then update it locally
  local git_dir="${BASE_DIR}/.git"
  if [[ -d "${git_dir}" ]]; then
    cd "${BASE_DIR}" && git pull -q && cd - &>/dev/null
  # or starting from script and load everything else
  else
    # Base directory becomes another folder
    BASE_DIR="${BASE_DIR}/.${PROGRAM}"
    # In this case, 2 possibilities: 
    # 1/ specific directory exists and the update it
    # 2/ specific directory doesn't exist and then use `git clone` inside
    if [[ -d "${BASE_DIR}" ]]; then
      cd "${BASE_DIR}" && git pull && cd - &>/dev/null
    else
      git clone -q "${SOURCE}" "${BASE_DIR}"
    fi
    # As base directory changes: load configuration again
    configure
  fi
}

#####
## ARGUMENTS
###

# No arg? Context help and exit
[ "$#" -lt 1 ] && help && exit 1

#####
## TESTS
###

#####
## BEGIN
###

# load user config. file
configure
# Before starting something: load everything else from these library (gen√®se)
self_loading

# filename used to describe a service
SERVICE_FILENAME="${SERVICE_FILENAME:-compose.yml}"
# Hook name to display some messages after installation (final message)
FINAL_INSTALLATION_HOOK_NAME="${FINAL_INSTALLATION_HOOK_NAME:-hook_fin.sh}"

# Load variables that depend on BASE_DIR
SERVICES_DIR="${SERVICES_DIR:-${BASE_DIR}/services.example}"
# Voluntaryly non-modifiable by an environment variable
TEMPLATES_DIR="${BASE_DIR}/templates"

# Load libraries
source "${BASE_DIR}/lib/common"
source "${BASE_DIR}/lib/git"
source "${BASE_DIR}/lib/docker"
source "${BASE_DIR}/lib/portainer"
source "${BASE_DIR}/lib/configs"

# We need services directory!
if [[ ! -d "${SERVICES_DIR}" ]]; then
  err_msg_and_exit "Missing directory: ${SERVICES_DIR}"
fi

INSTANCE_NAME=""
# Choosen by user in CLI
CHOOSEN_INSTANCE_NAME=""
# As a default: no instance creation
INSTANCE_CREATION=false

analyze_options $@

# Case where we create an instance
if "${INSTANCE_CREATION}"; then
  load_config "${CONFIG}"
  INSTANCE_NAME="${CHOOSEN_INSTANCE_NAME:-$CONFIG}"
  create_instance "${INSTANCE_NAME}"
  start_portainer
  post_instance_creation_msg "${INSTANCE_NAME}"
elif [[ -n "${CHOOSEN_INSTANCE_NAME}" ]]; then
  # Case where user give an instance without asking for instance creation
  err_msg_and_exit "Instance name: '${CHOOSEN_INSTANCE_NAME}', but no given configuration. Do '${PROGRAM} -l' to list existing configs."
fi

#####
## END
###

exit 0
# vim: ts=2 sw=2 et nu syn=bash