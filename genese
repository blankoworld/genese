#!/usr/bin/env bash
#
# genese: Outil pour générer des instances d'un à plusieurs projets via
#   Docker Compose en utilisant des configs pour savoir quels services
#   utiliser.
#

PROGRAMME=`basename $0 .sh`
REP_BASE=$(cd `dirname $0` && pwd)

#####
## VARIABLES
###

# Dépôt d'origine à télécharger
SOURCE="https://github.com/blankoworld/genese.git"

# Message d'utilisation du programme
read -d '' UTILISATION << EOF
Utilisation : ${PROGRAMME} [options]

OPTIONS
  -h, --help                  Affichage de l'aide contextuelle
  -i, --instance              Liste des instances installées
  -l, --liste                 Liste des configs disponibles
  -n <nom>, --nom <nom>       Nom de l'instance à créer (s'utilise avec -c)
  -c <nom>, --config <nom>    Utilisation de la config donnée
  -s <nom>, --supprime <nom>  Suppression de l'instance donnée

EXEMPLES

    # Afficher l'aide
    ${PROGRAMME} -h

    # Créer une instance en utilisant la config. 'defaut'
    ${PROGRAMME} -c defaut

    # Créer une instance 'super_instance' en utilisant la configuration 'defaut'
    ${PROGRAMME} -c defaut -n super_instance

    # Lister les instances ainsi créées
    ${PROGRAMME} -i

    # Supprimer l'instance nommée 'super_instance'
    ${PROGRAMME} -s super_instance

EOF

#####
## FONCTIONS
###

# Affiche l'aide contextuelle
aide() {
 echo -e "${UTILISATION}" 1>&2
}

# Parcours les options de la ligne de commande
analyse_options() {
  # Parcours seulement s'il y a des options
  while [[ "$#" -gt 0 ]]
  do
    case "$1" in
      # Aide contextuelle
      -h | --help)
        aide
        ;;
      -i | --instance)
        lister_instances
        ;;
      -l | --liste)
        list_configs
        ;;
      -n | --nom)
        erreur_parametre="Aucun nom d'instance donné pour le paramètre '--nom'."
        if [[ -n "${2}" ]]; then
          # Vérification que l'argument ne démarre pas par un tiret ("-")
          if [[ "${2}" == -* ]]; then
            msg_erreur_exit "${erreur_parametre}"
          fi
          # Initialisation du nom de l'instance (choix fait par l'utilisateur)
          NOM_INSTANCE_CHOISI="${2}"
        else
          msg_erreur_exit "${erreur_parametre}"
        fi
        ;;
      -c | --config)
        if [[ -n "${2}" ]]; then
          CONFIG="${2}"
        fi
        # Marqueur permettant de savoir qu'on souhaite lancer une création d'instance
        CREATION_INSTANCE=true
        ;;
      -s | --supprime)
        if [[ -n "${2}" ]]; then
          # Nom de l'instance à supprimer
          NOM_INSTANCE="${2}"
        else
          msg_erreur_exit "Aucune instance donnée en paramètre !"
        fi
        supprimer_instance "${NOM_INSTANCE}"
        ;;
    esac
    # Décalage de l'option pour parcourir la suivante
    shift
  done
}

# Charge les données utilisateurs
configure() {
  # Configuration par l'utilisateur ? Si oui, on charge !
  if [[ -f "${REP_BASE}/.env" ]]; then
    # Charge la liste des variables d'env. personnalisées de l'utilisateur
    source "${REP_BASE}/.env"
  fi
}

# Affichage du message final après création d'une instance
# - nécessite la bibliothèque 'docker'
# 1: Nom de l'instance
message_post_creation_instance() {
  # Liste des conteneurs de l'instance choisie
  # REP_INSTALLATION a été créé dans creer_instance
  lister_conteneurs "${REP_INSTALLATION}"

  # Exécution pour chaque service du fichier 'declencheur_message_final'
  # s'il existe.
  executer_script_services "${NOM_DECLENCHEUR_POST_INSTALLATION}"

  # Affichage des infos de portainer
  msg_info "Accès à l'ensemble des 'stacks' installées avec Docker (À METTRE EN FAVORI) : ${GRAS}${COULEUR_ROUGE}http://localhost:${PORT_PORTAINER}/${COULEUR_DEFAUT}"

  msg_succes "Instance '${1}' : Installation terminée."
}

# Essaie de charger le reste des fichiers de ce script en utilisant SOURCE
auto_chargement() {
  # Soit le dépôt GIT existe et on le met à jour,
  local git_rep="${REP_BASE}/.git"
  if [[ -d "${git_rep}" ]]; then
    cd "${REP_BASE}" && git pull -q && cd - &>/dev/null
  # soit nous partons du script seul et on télécharge le reste
  else
    # le répertoire de base devient un autre répertoire
    REP_BASE="${REP_BASE}/.${PROGRAMME}"
    # En ce cas 2 possibilités : 
    # 1/ le répertoire spécial existe et on met à jour
    # 2/ le répertoire spécial n'existe pas et on clone dedans
    if [[ -d "${REP_BASE}" ]]; then
      cd "${REP_BASE}" && git pull && cd - &>/dev/null
    else
      git clone -q "${SOURCE}" "${REP_BASE}"
    fi
    # Le répertoire de base ayant changé, on recharge la configuration
    configure
  fi
}

#####
## ARGUMENTS
###

# Pas d'argument ? Aide contextuelle et on quitte
[ "$#" -lt 1 ] && aide && exit 1

#####
## TESTS
###

#####
## DÉBUT
###

# charge le fichier de configuration de l'utilisateur
configure
# Avant toute chose on charge le reste de la bibliothèque
auto_chargement

# Nom du fichier utilisé pour décrire un service
NOM_FICHIER_SERVICE="${NOM_FICHIER_SERVICE:-compose.yml}"
# Nom du déclencheur d'affichage des messages après installation
NOM_DECLENCHEUR_POST_INSTALLATION="${NOM_DECLENCHEUR_POST_INSTALLATION:-hook_fin.sh}"

# Chargement des variables dépendantes du répertoire de BASE
# Répertoire dans lequel trouver les services
REP_SERVICES="${REP_SERVICES:-${REP_BASE}/services.exemple}"
# Répertoire dans lequel trouver les modèles (template) pour un certain
# nombre de fichiers. Volontairement non modifiable par variable d'env.
REP_TEMPLATES="${REP_BASE}/templates"

# Load libraries
source "${REP_BASE}/lib/common"
source "${REP_BASE}/lib/git"
source "${REP_BASE}/lib/docker"
source "${REP_BASE}/lib/portainer"
source "${REP_BASE}/lib/configs"

# On a besoin du répertoire des services
if [[ ! -d "${REP_SERVICES}" ]]; then
  msg_erreur_exit "Répertoire manquant : ${REP_SERVICES}"
fi

# Nom de l'instance à utiliser
NOM_INSTANCE=""
# Nom choisi par l'utilisateur pour une instance
NOM_INSTANCE_CHOISI=""
# À défaut, pas de création d'instance
CREATION_INSTANCE=false

# Parcours des options
analyse_options $@

# Cas de la création d'une instance
if "${CREATION_INSTANCE}"; then
  load_config "${CONFIG}"
  NOM_INSTANCE="${NOM_INSTANCE_CHOISI:-$CONFIG}"
  creer_instance "${NOM_INSTANCE}"
  # Traitement post-installation
  lancer_portainer
  # Affichage du message final d'installation pour l'instance choisie
  message_post_creation_instance "${NOM_INSTANCE}"
elif [[ -n "${NOM_INSTANCE_CHOISI}" ]]; then
  # Cas où l'utilisateur a donné le nom d'une instance, sans demander
  # la création d'une instance
  msg_erreur_exit "Nom d'instance: '${NOM_INSTANCE_CHOISI}', mais aucune configuration donnée. Faites '${PROGRAMME} -l' pour lister les configs existantes."
fi

#####
## FIN
###

exit 0
# vim: ts=2 sw=2 et nu syn=bash
