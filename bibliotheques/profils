#!/usr/bin/env bash
#
# Dépendance de cette bibliothèque : 
# - commun
# - docker

#####
## VARIABLES
###

# Profil par défaut pour créer des instances
PROFIL="${PROFIL:-defaut}"

# Répertoire dans lequel seront installées les instances
REP_INSTANCES="${REP_INSTANCES:-${REP_BASE}/instances}"
# Répertoire dans lequel trouver les profils
REP_PROFILS="${REP_PROFILS:-${REP_BASE}/profils.exemple}"
# Répertoire d'installation de l'instance (soit pour la création, soit pour la suppression). Initialisé quand nécessaire.
REP_INSTALLATION=""

# Liste des services trouvés
LISTE_SERVICES=()

# Nom des différents déclencheurs pre/post docker, build, etc.
NOM_DECLENCHEUR_PRE_DOCKER="${NOM_DECLENCHEUR_PRE_DOCKER:-z_pre_docker}"
NOM_DECLENCHEUR_POST_DOCKER="${NOM_DECLENCHEUR_POST_DOCKER:-z_post_docker}"

####
## FONCTIONS
###

# Découvre les services associés dans le fichier fourni
# Fonction récursive
# 1: Nom du profil situé dans le dossier REP_PROFILS
decouverte_services() {
  fichier="${REP_PROFILS}/${1}"

  # Interruption si profil non trouvé.
  if [[ ! -f "${REP_PROFILS}/${1}" ]]; then
    msg_erreur_exit "Profil '${1}' non trouvé !"
  fi

  # Chargement des données fournies dans le fichier
  source "${fichier}"

  # Enregistrement des services fournis si la variable existe
  if [[ -n "${SERVICES}" ]]; then
    # chargement du tableau
    les_services="${SERVICES[@]}"

    # Comme nous sommes dans une récursive, on interrompt le processus en
    # supprimant la variable SERVICES
    unset SERVICES

    # Enregistrement
    for service in "${les_services[@]}"; do
      LISTE_SERVICES+=( "${service}" )
    done

  fi

  # Les fichiers peuvent avoir un parent
  if [[ -n "${PARENT}" ]]; then
    # chargement du parent
    profil_parent="${PARENT}"
    unset PARENT

    # récupération des services du parent
    decouverte_services "${profil_parent}"
  fi
}

# Exécute le script donné en paramètre pour chaque service
# 1: nom du fichier à exécuter dans le service
executer_script_services() {
  if [[ -n "${1}" ]]; then
    # On exécute le script donné pour l'ensemble des services fournis
    for service in ${LISTE_SERVICES[@]}; do
      local fichier="${REP_SERVICES}/${service}/${1}"
      executer_script "${fichier}" "Service ${service} : exécution script '${1}'"
    done
  fi
}

# Liste des profils disponibles comme base pour les instances
lister_profils() {
  detection=false

  msg_info "Liste des profils"

  for profil in `ls "${REP_PROFILS}"`; do
    # Exclusion du profil commun
    if [[ "${profil}" != "commun" ]]; then
      msg "  - ${profil}"
      detection=true
    fi
  done

  if ! ${detection}; then
    msg_attention "Aucun profil trouvé."
  fi
}

# Listing des services trouvés
lister_services() {
  for service in ${LISTE_SERVICES[@]}; do
    msg_info "Service : ${service}"
  done
}


# Traite le chargement d'un profil
# 1: Nom du profil situé dans le dossier REP_PROFILS
charger_profil() {
  # Découverte de l'ensemble des services associés au fichier fourni
  decouverte_services "${1}"

  # Listing des services trouvés
  lister_services  
}

# Créé une instance à partir du profil donné en argument.
# 1: Nom du profil situé dans le dossier REP_PROFILS
creer_instance() {
  # Répertoire de l'instance
  REP_INSTALLATION="${REP_INSTANCES}/${1}"

  # Vérification de la présence du dossier
  if [[ ! -d "${REP_INSTALLATION}" ]]; then
    mkdir -p "${REP_INSTALLATION}" && msg_succes "Création répertoire '${REP_INSTALLATION}'"
  fi

  # TODO: si le dossier existait déjà, il faut couper les conteneurs

  # Création du fichier docker-compose.yml
  creer_fichier_docker_compose "${REP_INSTALLATION}"

  # TODO: Lancement de la commande "build" de Docker Compose
  # TODO: AVANT la commande build, exécuter les scripts
  # "declencheur_pre_docker_build" si existant

  # Lancement du script "declencheur_pre_docker" s'il existe dans
  # le dossier d'un service
  executer_script_services "${NOM_DECLENCHEUR_PRE_DOCKER}"

  # Démarrage des conteneurs Docker
  demarre_conteneurs "${REP_INSTALLATION}"

  # Lancement du script "declencheur_post_docker" s'il existe dans
  # le dossier d'un service
  executer_script_services "${NOM_DECLENCHEUR_POST_DOCKER}"
}

# Listing des instances installées
lister_instances() {
  detection=false

  if [[ ! -d "${REP_INSTANCES}" ]]; then
    msg_erreur_exit "Répertoire d'instance manquant : ${REP_INSTANCES}"
  fi

  msg_info "Liste des instances"

  # Liste des dossiers du répertoire des instances
  for instance in `ls "${REP_INSTANCES}"`; do
    fichier="${REP_INSTANCES}/${instance}/${NOM_FICHIER_DOCKER_COMPOSE}"
    if [[ -f "${fichier}" ]]; then
      msg "  - ${REP_INSTANCES}/${instance}"
      detection=true
    fi
  done

  if ! ${detection}; then
    msg_attention "Aucune instance trouvée."
  fi
}

# Supprime l'instance donnée
# 1: Nom de l'instance
supprimer_instance() {
  REP_INSTALLATION="${REP_INSTANCES}/${1}"

  # Contrôle de l'existence de l'instance
  if [[ ! -d "${REP_INSTALLATION}" ]]; then
    msg_erreur_exit "Instance non trouvée : ${1} (dans ${REP_INSTALLATION})"
  fi

  # Alerte à l'utilisateur pour éviter les erreurs
  msg_attention "Êtes-vous sûr de vouloir supprimer l'instance ${REP_INSTALLATION} ? (o/N)"
  read reponse

  case "${reponse}" in
    o|O)
      msg_info "Suppression de : ${REP_INSTALLATION}"

      # Extinction d'éventuels conteneurs lancés
      suppression_conteneurs "${REP_INSTALLATION}"

      # Suppression de l'instance
      rm -rf "${REP_INSTALLATION}"

      msg_succes "Instance supprimée : ${1} (dans ${REP_INSTALLATION})"
      ;;
    *)
      msg_info "Aucune instance supprimée."
      ;;
  esac
}

#####
## TESTS
###

# On a besoin du répertoire contenant les profils
if [[ ! -d "${REP_PROFILS}" ]]; then
  msg_erreur_exit "Répertoire manquant : ${REP_PROFILS}"
fi

# Création du répertoire des instances s'il n'existe pas
if [[ ! -d "${REP_INSTANCES}" ]]; then
  mkdir -p "${REP_INSTANCES}"
fi

# vim: ts=2 sw=2 et nu syn=bash
