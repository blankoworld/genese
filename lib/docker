#!/usr/bin/env bash
#
# Dépendance de cette bibliothèque : 
# - commun

#####
## VARIABLES
###

# Nom du fichier Docker Compose final (pour l'instance)
NOM_FICHIER_DOCKER_COMPOSE="${NOM_FICHIER_DOCKER_COMPOSE:-docker-compose.yml}"
# Adresse de l'entête utilisée pour le fichier Docker Compose final
ENTETE_DOCKER_COMPOSE="${REP_TEMPLATES}/entete.yml"
# Message d'erreur commun aux problèmes Docker
MSG_ERR_DOCKER="Souci avec Docker"
# Adresse du socket Docker
SOCKET_DOCKER="${SOCKET_DOCKER:-/var/run/docker.sock}"

# Adresse du fichier docker-compose.yml. Cette variable est nécessaire pour
# permettre aux multiples scripts des différents scripts d'y accéder.
FICHIER_DOCKER_COMPOSE=""

# Commande DOCKER
CMD_DOCKER=""
# Commande Docker Compose
CMD_DOCKER_COMPOSE=""

#####
## FONCTIONS
###

# Vérification de la commande Docker : 
# - soit podman
# - soit docker
test_docker_present() {
  for cmd in podman docker; do
    if [[ `which ${cmd} &> /dev/null; echo $?` == 0 ]]; then
      export CMD_DOCKER=`which ${cmd}`
      break
    fi
  done
  if [[ -z "${CMD_DOCKER}" ]]; then
    msg_erreur_exit "Commande DOCKER : non trouvée !"
  fi
}

# Vérification de la commande Docker Compose
# S'appuie sur CMD_DOCKER précédent
test_docker_compose_present() {
  # on ajoute "-compose" à CMD_DOCKER (podman-compose ou docker-compose)
  cmd_compose="${CMD_DOCKER}-compose"
  if [[ `${cmd_compose} &> /dev/null; echo $?` == 0 ]]; then
    export CMD_DOCKER_COMPOSE="${cmd_compose}"
  else
    # TODO: remanier code avec `docker info -f '{{json .ClientInfo.Plugins}}'`
    cmd_compose="${CMD_DOCKER} compose"
    ${cmd_compose} version &> /dev/null && export CMD_DOCKER_COMPOSE="${cmd_compose}"
  fi
  if [[ -z "${CMD_DOCKER_COMPOSE}" ]];  then
    msg_erreur_exit "Commande DOCKER COMPOSE : non trouvée !"
  fi
}

# Vérification du service Docker
test_service_docker_en_execution() {
  $CMD_DOCKER info &> /dev/null \
    && msg_succes "DOCKER : présent et lancé !" \
    || msg_erreur_exit "DOCKER : manquant ! Vérifiez qu'il soit présent et lancé."
}

# Initialisation de la variable globale contenant l'adresse du fichier
# docker-compose.yml
# 1: Répertoire duquel construire la variable
initialisation_variable_docker_compose() {
  # On ne créé du contenu pour la variable que si elle n'a jamais été remplie.
  if [[ -z "${FICHIER_DOCKER_COMPOSE}" ]]; then
    local debut_adresse=""
    if [[ -n "${1}" ]]; then
      debut_adresse="${1}/"
    fi
    FICHIER_DOCKER_COMPOSE="${debut_adresse}${NOM_FICHIER_DOCKER_COMPOSE}"
  fi
}

# Création de l'espace Docker dans le répertoire donné en argument
# 1: répertoire où installer le fichier docker-compose.yml et .env
creer_espace_docker() {
  local destination="${1}"

  # Création du fichier docker-compose.yml
  creer_fichier_docker_compose "${destination}"

  # Création du fichier d'environnement dans le répertoire d'installation
  creer_fichier_env "${destination}"
}

# Création du fichier docker-compose.yml dans le dossier donné
# 1: Répertoire dans lequel créer le fichier docker-compose.yml
creer_fichier_docker_compose() {

  # contrôle du répertoire
  if [[ -z "${1}" ]]; then
    msg_erreur_exit "Aucun répertoire donné"
  elif [[ ! -d "${1}" ]]; then
    msg_erreur_exit "Répertoire non trouvé : ${1}"
  fi

  initialisation_variable_docker_compose "${1}"

  # entête du fichier final
  cat "${ENTETE_DOCKER_COMPOSE}" > "${FICHIER_DOCKER_COMPOSE}"

  # ajout de chacun des services
  for service in ${LISTE_SERVICES[@]}; do
    fichier_service="${REP_SERVICES}/${service}/${NOM_FICHIER_SERVICE}"

    # contrôle existance du fichier de description du service
    if [[ ! -f "${fichier_service}" ]]; then
      msg_erreur_exit "Le fichier ${fichier_service} n'existe pas !"
    fi

    # concaténation du contenu avec le fichier final
    cat "${fichier_service}"|sed -e 's#^#  #g' >> "${FICHIER_DOCKER_COMPOSE}"
  done

  msg_succes "Fichier Docker Compose: ${FICHIER_DOCKER_COMPOSE}"
}

# Création d'un fichier .env dans le répertoire donné en paramètre
# 1: Répertoire d'installation du fichier .env
creer_fichier_env() {
  if [[ ! -d "${1}" ]]; then
    msg_erreur_exit "Création d'un fichier .env : Destination '${1}' inexistante."
  fi

  local destination="${1}"
  local fichier_env="${destination}/.env"

  msg_info ".env : mémorisation des variables d'environnement nécessaires."

  # Utilisation du nom de l'utilisateur comme préfixe,
  # agrémenté du nom du répertoire d'installation (qui est censé être unique…)
  # Remplacement des caractères '/' en '-'
  COMPOSE_PROJECT_NAME=`echo "${USER/./-}-${REP_INSTALLATION##*/}" \
    |sed -e 's|/|-|g' \
    -e 's|\.|-|'`

  # Création du fichier
  echo "# Fichier généré par ${PROGRAMME}" > "${fichier_env}"
  echo "REP_SERVICES=\"${REP_SERVICES}\"" >> "${fichier_env}"
  echo "REP_INSTALLATION=\"${REP_INSTALLATION}\"" >> "${fichier_env}"
  echo "SOCKET_DOCKER=\"${SOCKET_DOCKER}\"" >> "${fichier_env}"
  echo "COMPOSE_PROJECT_NAME=\"${COMPOSE_PROJECT_NAME}\"" >> "${fichier_env}"

  # Tous les "PORT_" s'ajoutent aussi (au cas où nous changeons des ports)
  # Si pas de sortie de script, on retourne un statut à 0.
  printenv|grep -E "^PORT_.*" >> "${fichier_env}" || :
}

# Test si le fichier Docker Compose existe, sinon retourne une erreur
# 1: Fichier Docker Compose
test_existence_fichier_compose() {
  fichier="${1}"

  if [[ -z "${fichier}" ]]; then
    msg_erreur_exit "Aucun fichier Docker Compose fourni."
  fi

  # Si le fichier n'existe pas, on s'arrête !
  if [[ ! -f "${fichier}" ]]; then
    msg_erreur_exit "Fichier Docker Compose non trouvé : ${fichier}"
  fi
}

# Démarrage des conteneurs liés au dossier donné (contenant un fichier
# docker-compose.yml)
# 1: Répertoire dans lequel se trouve le fichier docker-compose.yml
demarre_conteneurs() {

  initialisation_variable_docker_compose "${1}"

  # Vérification que le fichier Docker Compose existe
  test_existence_fichier_compose "${FICHIER_DOCKER_COMPOSE}"
  # Vérification que Docker est bel et bien lancé
  test_service_docker_en_execution

  # Démarrage des conteneurs
  msg_info "Démarrage des conteneurs Docker"
  ${CMD_DOCKER_COMPOSE} -f "${FICHIER_DOCKER_COMPOSE}" up -d || msg_erreur_exit \
    "${MSG_ERR_DOCKER}"

  msg_succes "Conteneurs Docker lancés"
}

# Liste des conteneurs liés au dossier donné (contenant un fichier
# docker-compose.yml)
# 1: Répertoire dans lequel se trouve le fichier docker-compose.yml
lister_conteneurs() {

  initialisation_variable_docker_compose "${1}"

  # Vérification que le fichier Docker Compose existe
  test_existence_fichier_compose "${FICHIER_DOCKER_COMPOSE}"
  # Vérification que Docker est bel et bien lancé
  test_service_docker_en_execution

  # Liste des conteneurs
  msg_info "Liste des conteneurs Docker lancés"
  ${CMD_DOCKER_COMPOSE} -f "${FICHIER_DOCKER_COMPOSE}" ps || msg_erreur_exit \
    "${MSG_ERR_DOCKER}"
}

# Suppression des conteneurs liés au dossier donné (contenant un fichier
# docker-compose.yml)
# 1: Répertoire dans lequel se trouve le fichier docker-compose.yml
suppression_conteneurs() {

  initialisation_variable_docker_compose "${1}"

  # Vérification que le fichier Docker Compose existe
  test_existence_fichier_compose "${FICHIER_DOCKER_COMPOSE}"
  # Vérification que Docker est bel et bien lancé
  test_service_docker_en_execution

  # Arrêt des conteneurs Docker
  ${CMD_DOCKER_COMPOSE} -f "${FICHIER_DOCKER_COMPOSE}" kill || msg_erreur_exit \
    "${MSG_ERR_DOCKER}"
  # Suppression des conteneurs
  ${CMD_DOCKER_COMPOSE} -f "${FICHIER_DOCKER_COMPOSE}" down || msg_erreur_exit \
    "${MSG_ERR_DOCKER}"

  msg_succes "Arrêt des conteneurs Docker"
}

#####
## TESTS
###

# Vérification de la présence de Docker : arrêt du programme si absent
test_docker_present
# Vérification de la présence de Docker Compose : arrêt du programme si absent
test_docker_compose_present

# vim: ts=2 sw=2 et nu syn=bash
