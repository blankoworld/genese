#!/usr/bin/env bash
#
# Dépendance de cette bibliothèque : 
# - common
# - docker
# - git

#####
## VARIABLES
###

# Configuration par défaut pour créer des instances
CONFIG="${CONFIG:-default}"

# Répertoire dans lequel seront installées les instances
REP_INSTANCES="${REP_INSTANCES:-${REP_BASE}/instances}"
# Répertoire dans lequel trouver les configs
REP_CONFIGS="${REP_CONFIGS:-${REP_BASE}/configs.example}"
# Répertoire d'installation de l'instance (soit pour la création, soit pour la suppression). Initialisé quand nécessaire.
REP_INSTALLATION=""

# Liste des services trouvés
LISTE_SERVICES=()

# Nom des différents déclencheurs pre/post docker, build, etc.
NOM_DECLENCHEUR_PRE_DOCKER="${NOM_DECLENCHEUR_PRE_DOCKER:-hook_pre_docker.sh}"
NOM_DECLENCHEUR_POST_DOCKER="${NOM_DECLENCHEUR_POST_DOCKER:-hook_post_docker.sh}"

# Nom du fichier contenant les informations du dépôt à télécharger
NOM_FICHIER_SOURCE="${NOM_FICHIER_SOURCE:-source}"

# Nom du dossier 'extras' contenant des fichiers à copier "tels quels" dans
# le répertoire de destination
NOM_DOSSIER_EXTRAS="${NOM_DOSSIER_EXTRAS:-extras}"

# Messages d'erreurs
ERR_400="La variable REP_INSTALLATION est vide."

####
## FONCTIONS
###

# Découvre les services associés dans le fichier fourni
# Fonction récursive
# 1: Nom de la configuration située dans le dossier REP_CONFIGS
decouverte_services() {
  fichier="${REP_CONFIGS}/${1}.sh"

  # Interruption si configuration non trouvée.
  if [[ ! -f "${fichier}" ]]; then
    debug_msg "${fichier}"
    err_msg_and_exit "Config. '${1}' non trouvée !"
  fi

  # Chargement des données fournies dans le fichier
  source "${fichier}"

  # Enregistrement des services fournis si la variable existe
  if [[ -n "${SERVICES}" ]]; then
    # chargement du tableau
    les_services="${SERVICES[@]}"

    # Comme nous sommes dans une récursive, on interrompt le processus en
    # supprimant la variable SERVICES
    unset SERVICES

    # Enregistrement
    for service in "${les_services[@]}"; do
      LISTE_SERVICES+=( "${service}" )
    done

  fi

  # Les fichiers peuvent avoir un parent
  if [[ -n "${PARENT}" ]]; then
    # chargement du parent
    parent_config="${PARENT}"
    unset PARENT

    # récupération des services du parent
    decouverte_services "${parent_config}"
  fi
}

# Exécute le script donné en paramètre pour chaque service
# 1: nom du fichier à exécuter dans le service
executer_script_services() {
  if [[ -n "${1}" ]]; then
    # On exécute le script donné pour l'ensemble des services fournis
    for service in ${LISTE_SERVICES[@]}; do
      local fichier="${REP_SERVICES}/${service}/${1}"
      script_exec "${fichier}" "Service ${service} : exécution script '${1}'"
    done
  fi
}

# Extrait les infos données dans le fichier 'source' puis télécharge le dépôt
# 1: nom du service étudié
charger_depot_service() {
  # Message d'erreur si on a pas de répertoire d'installation renseigné
  if [[ -z "${REP_INSTALLATION}" ]]; then
    err_msg_and_exit "${ERR_400}"
  fi

  # initialisation de variables
  local service="${1}"
  local fichier="${REP_SERVICES}/${service}/${NOM_FICHIER_SOURCE}"
  local destination="${REP_INSTALLATION}/${service}"

  # Chargement des informations si le fichier existe
  if [[ -f "${fichier}" ]]; then
    local branche=$(cat "${fichier}"|cut -d ' ' -f 1)
    local adresse=$(cat "${fichier}"|cut -d ' ' -f 2-)

    # Vérif. branche à charger (BRANCHE_nomService supplante la valeur)
    local variable=$(echo "BRANCHE_${service^^}"|tr '[:lower:]' '[:upper:]'|sed -e 's/-/_/g')
    branche="${!variable:-${branche}}"

    git_clone "${adresse}" "${branche}" "${destination}"
  fi
}

# Charge les fichiers de chaque service dans le rép. d'installation.
# Se fait en plusieurs étapes : 
# 1/ d'abord on charge les dépôts Git de chaque service
# 2/ ensuite on charge le dossier extras par dessus pour éventuellement écraser
# les fichiers existants (sorte de "patch" qu'on choisit d'appliquer)
charger_fichiers_services() {
  # Si le répertoire d'installation n'est pas connu on renvoie une erreur.
  if [[ -z "${REP_INSTALLATION}" ]]; then
    err_msg_and_exit "${ERR_400}"
  fi

  # 1/ Chargement des dépôts Git de chaque service (uniquement si existant)
  for service in ${LISTE_SERVICES[@]}; do
    charger_depot_service "${service}"
  done

  # 2/ Écrasement éventuel des fichiers suivant le dossier "extras"
  for service in ${LISTE_SERVICES[@]}; do
    copier_extras_service "${service}"
  done
}

# Copie l'ensemble des fichiers du dossier 'extras' dans le répertoire
# d'installation (à la racine)
# 1: Nom du service étudié
copier_extras_service() {
  local origine="${REP_SERVICES}/${service}/${NOM_DOSSIER_EXTRAS}"

  if [[ -d "${origine}" ]]; then
    info_msg "${service}: Copie des fichiers du dossier extras"
    # On ajoute une étoile après les guillemets pour prendre tous les fichiers
    cp -r "${origine}/"* "${REP_INSTALLATION}/"
  fi
}

# Liste des configs disponibles comme base pour les instances
list_configs() {
  detection=false

  info_msg "Liste des configs"

  for config in `find "${REP_CONFIGS}" -type f -name "*.sh" -printf "%f\n"`; do
    # Exclusion de la config. common
    if [[ "${config}" != "common.sh" ]]; then
      msg "  - ${config/.sh/}"
      detection=true
    fi
  done

  if ! ${detection}; then
    warning_msg "Aucune config. trouvée."
  fi
}

# Listing des services trouvés
lister_services() {
  for service in ${LISTE_SERVICES[@]}; do
    info_msg "Service : ${service}"
  done
}


# Traite le chargement d'une config.
# 1: Nom de la config. située dans le dossier REP_CONFIGS
load_config() {
  # Découverte de l'ensemble des services associés au fichier fourni
  decouverte_services "${1}"

  # Listing des services trouvés
  lister_services  
}

# Créé une instance à partir de la config. donnée en argument.
# 1: Nom de la config. située dans le dossier REP_CONFIGS
# On va procéder en plusieurs étapes : 
# - création du répertoire si besoin
# - TODO: extinction de précédents conteneurs
# - (re)création du fichier docker-compose.yml
# - installation des fichiers nécessaires à l'instance
# - TODO: déclencheur pour le script avant build Docker
# - TODO: lancement du build Docker (pour éventuellement afficher une erreur)
# - déclencheur pour le script avant le lancement des conteneurs Docker
# - lancement des conteneurs
# - déclencheur pour le script après le lancement des conteneurs Docker
creer_instance() {
  # Répertoire de l'instance
  REP_INSTALLATION="${REP_INSTANCES}/${1}"

  # Vérification de la présence du dossier
  if [[ ! -d "${REP_INSTALLATION}" ]]; then
    mkdir -p "${REP_INSTALLATION}" && success_msg "Création répertoire '${REP_INSTALLATION}'"
  fi

  # TODO: si le dossier existait déjà, il faut couper les conteneurs

  # Préparation de l'environnement docker (docker-compose.yml + .env)
  creer_espace_docker "${REP_INSTALLATION}"

  # Avant de lancer quoique ce soit, on charge les fichiers "extras" dans le
  # répertoire d'installation
  charger_fichiers_services

  # TODO: Lancement de la commande "build" de Docker Compose
  # TODO: AVANT la commande build, exécuter les scripts
  # "declencheur_pre_docker_build" si existant

  # Lancement du script "declencheur_pre_docker" s'il existe dans
  # le dossier d'un service
  executer_script_services "${NOM_DECLENCHEUR_PRE_DOCKER}"

  # Démarrage des conteneurs Docker
  demarre_conteneurs "${REP_INSTALLATION}"

  # Lancement du script "declencheur_post_docker" s'il existe dans
  # le dossier d'un service
  executer_script_services "${NOM_DECLENCHEUR_POST_DOCKER}"
}

# Listing des instances installées
lister_instances() {
  detection=false

  if [[ ! -d "${REP_INSTANCES}" ]]; then
    err_msg_and_exit "Répertoire d'instance manquant : ${REP_INSTANCES}"
  fi

  info_msg "Liste des instances"

  # Liste des dossiers du répertoire des instances
  for instance in `ls "${REP_INSTANCES}"`; do
    fichier="${REP_INSTANCES}/${instance}/${NOM_FICHIER_DOCKER_COMPOSE}"
    if [[ -f "${fichier}" ]]; then
      msg "  - ${REP_INSTANCES}/${instance}"
      detection=true
    fi
  done

  if ! ${detection}; then
    warning_msg "Aucune instance trouvée."
  fi
}

# Supprime l'instance donnée
# 1: Nom de l'instance
supprimer_instance() {
  REP_INSTALLATION="${REP_INSTANCES}/${1}"

  # Contrôle de l'existence de l'instance
  if [[ ! -d "${REP_INSTALLATION}" ]]; then
    err_msg_and_exit "Instance non trouvée : ${1} (dans ${REP_INSTALLATION})"
  fi

  # Alerte à l'utilisateur pour éviter les erreurs
  warning_msg "Êtes-vous sûr de vouloir supprimer l'instance ${REP_INSTALLATION} ? (o/N)"
  read reponse

  case "${reponse}" in
    o|O)
      info_msg "Suppression de : ${REP_INSTALLATION}"

      # Extinction d'éventuels conteneurs lancés
      suppression_conteneurs "${REP_INSTALLATION}"

      # Suppression de l'instance
      rm -rf "${REP_INSTALLATION}"

      success_msg "Instance supprimée : ${1} (dans ${REP_INSTALLATION})"
      ;;
    *)
      info_msg "Aucune instance supprimée."
      ;;
  esac
}

#####
## TESTS
###

# On a besoin du répertoire contenant les configs
if [[ ! -d "${REP_CONFIGS}" ]]; then
  err_msg_and_exit "Répertoire manquant : ${REP_CONFIGS}"
fi

# Création du répertoire des instances s'il n'existe pas
if [[ ! -d "${REP_INSTANCES}" ]]; then
  mkdir -p "${REP_INSTANCES}"
fi

# vim: ts=2 sw=2 et nu syn=bash
